/* ========================================
   SISTEMA DE CONTROL DE ESTACIONAMIENTO PRO
   Versión Mejorada con múltiples funcionalidades
   ======================================== */

// ========================================
// CONFIGURACIÓN Y CONSTANTES
// ========================================
const CONFIG = {
    STORAGE_KEYS: {
        VEHICULOS: 'estacionamiento_vehiculos',
        HISTORIAL: 'estacionamiento_historial',
        TARIFAS: 'estacionamiento_tarifas',
        TEMA: 'estacionamiento_tema',
        CONTADOR: 'estacionamiento_contador'
    },
    TARIFAS_DEFAULT: {
        primeraHora: 15,
        fraccionMinuto: 0.50,
        cargoMaximo: 100
    },
    CURRENCY: 'es-MX',
    CURRENCY_CODE: 'MXN'
};

const CURRENCY_FORMATTER = new Intl.NumberFormat(CONFIG.CURRENCY, {
    style: 'currency',
    currency: CONFIG.CURRENCY_CODE,
    minimumFractionDigits: 2
});

// ========================================
// ESTADO DE LA APLICACIÓN
// ========================================
let vehiculosEstacionados = [];
let historialSalidas = [];
let idCounter = 0;
let chartInstance = null;
let bluetoothDevice = null;
let bluetoothCharacteristic = null;
let tarifas = { ...CONFIG.TARIFAS_DEFAULT };

// ========================================
// ELEMENTOS DEL DOM
// ========================================
const elements = {
    // Formularios
    entradaForm: document.getElementById('entrada-form'),
    salidaForm: document.getElementById('salida-form'),
    configForm: document.getElementById('config-form'),
    
    // Inputs
    placasInput: document.getElementById('placas'),
    modeloInput: document.getElementById('modelo'),
    detalleInput: document.getElementById('detalle'),
    placasSalidaInput: document.getElementById('placas_salida'),
    searchEstacionados: document.getElementById('search-estacionados'),
    searchHistorial: document.getElementById('search-historial'),
    
    // Listas y contadores
    estacionadosList: document.getElementById('estacionados-list'),
    historialList: document.getElementById('historial-list'),
    countEstacionados: document.getElementById('count-estacionados'),
    countHistorial: document.getElementById('count-historial'),
    
    // Estadísticas
    totalCobrado: document.getElementById('total-cobrado'),
    totalAutos: document.getElementById('total-autos'),
    autosEstacionados: document.getElementById('autos-estacionados'),
    promedioAuto: document.getElementById('promedio-auto'),
    
    // Status y Modals
    salidaStatus: document.getElementById('salida-status'),
    modalOverlay: document.getElementById('modal-overlay'),
    modalTitle: document.getElementById('modal-title'),
    modalMessage: document.getElementById('modal-message'),
    modalCloseBtn: document.getElementById('modal-close-btn'),
    configModal: document.getElementById('config-modal'),
    
    // Botones
    bluetoothBtn: document.getElementById('connect-bluetooth-btn'),
    bluetoothStatus: document.getElementById('bluetooth-status'),
    themeToggle: document.getElementById('theme-toggle'),
    themeIcon: document.getElementById('theme-icon'),
    configTarifasBtn: document.getElementById('config-tarifas-btn'),
    cancelConfigBtn: document.getElementById('cancel-config-btn'),
    clearHistorialBtn: document.getElementById('clear-historial-btn'),
    backupBtn: document.getElementById('backup-btn'),
    restoreBtn: document.getElementById('restore-btn'),
    exportCsvBtn: document.getElementById('export-csv-btn'),
    exportReportBtn: document.getElementById('export-report-btn'),
    restoreFileInput: document.getElementById('restore-file-input'),
    
    // Otros
    currentDate: document.getElementById('current-date'),
    currentTime: document.getElementById('current-time'),
    ticketDisplay: document.getElementById('ticket-display'),
    printableTicket: document.getElementById('printable-ticket'),
    toastContainer: document.getElementById('toast-container'),
    chart: document.getElementById('entradas-chart')
};

// ========================================
// GESTIÓN DE DATOS (LocalStorage)
// ========================================
function saveData() {
    try {
        localStorage.setItem(CONFIG.STORAGE_KEYS.VEHICULOS, JSON.stringify(vehiculosEstacionados));
        localStorage.setItem(CONFIG.STORAGE_KEYS.HISTORIAL, JSON.stringify(historialSalidas));
        localStorage.setItem(CONFIG.STORAGE_KEYS.CONTADOR, idCounter.toString());
        localStorage.setItem(CONFIG.STORAGE_KEYS.TARIFAS, JSON.stringify(tarifas));
    } catch (error) {
        showToast('Error al guardar datos', 'error');
        console.error('Error saving data:', error);
    }
}

function loadData() {
    try {
        const vehiculosData = localStorage.getItem(CONFIG.STORAGE_KEYS.VEHICULOS);
        const historialData = localStorage.getItem(CONFIG.STORAGE_KEYS.HISTORIAL);
        const contadorData = localStorage.getItem(CONFIG.STORAGE_KEYS.CONTADOR);
        const tarifasData = localStorage.getItem(CONFIG.STORAGE_KEYS.TARIFAS);

        if (vehiculosData) {
            vehiculosEstacionados = JSON.parse(vehiculosData).map(v => ({
                ...v,
                horaEntrada: new Date(v.horaEntrada),
                horaSalida: v.horaSalida ? new Date(v.horaSalida) : null
            }));
        }

        if (historialData) {
            historialSalidas = JSON.parse(historialData).map(v => ({
                ...v,
                horaEntrada: new Date(v.horaEntrada),
                horaSalida: new Date(v.horaSalida)
            }));
        }

        if (contadorData) {
            idCounter = parseInt(contadorData);
        }

        if (tarifasData) {
            tarifas = JSON.parse(tarifasData);
        }
    } catch (error) {
        showToast('Error al cargar datos', 'error');
        console.error('Error loading data:', error);
    }
}

// ========================================
// SISTEMA DE TARIFAS Y CÁLCULO DE COSTOS
// ========================================
function calcularCosto(vehiculo) {
    const ahora = new Date();
    const entrada = new Date(vehiculo.horaEntrada);
    const diffMs = ahora - entrada;
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    
    let costoTotal = 0;
    
    if (diffMinutes <= 60) {
        costoTotal = tarifas.primeraHora;
    } else {
        costoTotal = tarifas.primeraHora + ((diffMinutes - 60) * tarifas.fraccionMinuto);
    }
    
    // Aplicar cargo máximo
    if (costoTotal > tarifas.cargoMaximo) {
        costoTotal = tarifas.cargoMaximo;
    }
    
    // Formatear duración
    const horas = Math.floor(diffMinutes / 60);
    const minutos = diffMinutes % 60;
    const duracion = `${horas}h ${minutos}m`;
    
    return { duracion, costoTotal: Math.max(0, costoTotal) };
}

// ========================================
// UTILIDADES DE FORMATO
// ========================================
function formatDateTime(date) {
    if (!date) return 'N/A';
    const d = new Date(date);
    return d.toLocaleString('es-MX', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function updateClock() {
    const now = new Date();
    const dateStr = now.toLocaleDateString('es-MX', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    const timeStr = now.toLocaleTimeString('es-MX', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    
    elements.currentDate.textContent = dateStr;
    elements.currentTime.textContent = timeStr;
}

// ========================================
// SISTEMA DE NOTIFICACIONES (TOAST)
// ========================================
function showToast(message, type = 'info', duration = 3000) {
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    const icon = {
        success: '✅',
        error: '❌',
        warning: '⚠️',
        info: 'ℹ️'
    }[type] || 'ℹ️';
    
    toast.innerHTML = `
        <span style="font-size: 1.5rem;">${icon}</span>
        <span>${message}</span>
    `;
    
    elements.toastContainer.appendChild(toast);
    
    setTimeout(() => {
        toast.style.animation = 'slideOut 0.3s ease-out';
        setTimeout(() => toast.remove(), 300);
    }, duration);
}

// ========================================
// MODAL GENÉRICO
// ========================================
function showModal(title, message) {
    elements.modalTitle.textContent = title;
    elements.modalMessage.textContent = message;
    elements.modalOverlay.classList.remove('hidden');
    elements.modalOverlay.classList.add('flex');
}

function closeModal() {
    elements.modalOverlay.classList.add('hidden');
    elements.modalOverlay.classList.remove('flex');
}

// ========================================
// BLUETOOTH - CONEXIÓN E IMPRESIÓN
// ========================================
async function connectBluetooth() {
    try {
        bluetoothDevice = await navigator.bluetooth.requestDevice({
            filters: [{ services: ['000018f0-0000-1000-8000-00805f9b34fb'] }],
            optionalServices: ['000018f0-0000-1000-8000-00805f9b34fb']
        });

        const server = await bluetoothDevice.gatt.connect();
        const service = await server.getPrimaryService('000018f0-0000-1000-8000-00805f9b34fb');
        bluetoothCharacteristic = await service.getCharacteristic('00002af1-0000-1000-8000-00805f9b34fb');

        elements.bluetoothStatus.innerHTML = '✅ <strong>Conectado</strong>';
        elements.bluetoothStatus.style.color = '#10B981';
        elements.bluetoothBtn.textContent = 'Desconectar';
        showToast('Impresora conectada exitosamente', 'success');
        
        bluetoothDevice.addEventListener('gattserverdisconnected', onBluetoothDisconnected);
    } catch (error) {
        console.error('Error de conexión Bluetooth:', error);
        showToast('Error al conectar con la impresora', 'error');
    }
}

function onBluetoothDisconnected() {
    elements.bluetoothStatus.innerHTML = '📴 Desconectado';
    elements.bluetoothStatus.style.color = '#EF4444';
    elements.bluetoothBtn.textContent = 'Conectar';
    bluetoothCharacteristic = null;
    showToast('Impresora desconectada', 'warning');
}

async function imprimirViaBluetooth(contenido) {
    if (!bluetoothCharacteristic) {
        showToast('Impresora no conectada', 'warning');
        return false;
    }

    try {
        const encoder = new TextEncoder();
        const data = encoder.encode(contenido + '\n\n\n\n');
        await bluetoothCharacteristic.writeValue(data);
        showToast('Ticket enviado a impresora', 'success');
        return true;
    } catch (error) {
        console.error('Error de impresión:', error);
        showToast('Error al imprimir ticket', 'error');
        return false;
    }
}

// ========================================
// GENERACIÓN DE TICKETS
// ========================================
function generarTicket(vehiculo, esSalida = false) {
    const linea = '================================';
    const espaciado = '\n';
    
    let ticket = espaciado;
    ticket += '   ESTACIONAMIENTO LA PLAZA' + espaciado;
    ticket += linea + espaciado;
    
    if (!esSalida) {
        ticket += '        TICKET DE ENTRADA' + espaciado;
        ticket += linea + espaciado;
        ticket += `Código: ${vehiculo.placas}` + espaciado;
        ticket += `Modelo: ${vehiculo.modelo}` + espaciado;
        ticket += `Detalle: ${vehiculo.detalle}` + espaciado;
        ticket += `Entrada: ${formatDateTime(vehiculo.horaEntrada)}` + espaciado;
    } else {
        ticket += '        TICKET DE SALIDA' + espaciado;
        ticket += linea + espaciado;
        ticket += `Código: ${vehiculo.placas}` + espaciado;
        ticket += `Modelo: ${vehiculo.modelo}` + espaciado;
        ticket += `Entrada: ${formatDateTime(vehiculo.horaEntrada)}` + espaciado;
        ticket += `Salida: ${formatDateTime(vehiculo.horaSalida)}` + espaciado;
        ticket += `Duración: ${vehiculo.duracion}` + espaciado;
        ticket += linea + espaciado;
        ticket += `TOTAL A PAGAR: ${CURRENCY_FORMATTER.format(vehiculo.costoTotal)}` + espaciado;
    }
    
    ticket += linea + espaciado;
    ticket += '    ¡Gracias por su visita!' + espaciado;
    ticket += espaciado;
    
    return ticket;
}

async function generarEImprimirTicket(vehiculo, esSalida) {
    const ticketContenido = generarTicket(vehiculo, esSalida);
    elements.printableTicket.textContent = ticketContenido;
    
    // Intentar imprimir vía Bluetooth
    const impreso = await imprimirViaBluetooth(ticketContenido);
    
    // Si no se imprimió vía Bluetooth, intentar impresión del navegador
    if (!impreso) {
        setTimeout(() => {
            window.print();
        }, 100);
    }
}

// ========================================
// REGISTRO DE ENTRADA
// ========================================
function registrarEntrada(placas, modelo, detalle) {
    // Validaciones
    placas = placas.toUpperCase().trim();
    
    if (!placas || !modelo) {
        showToast('Placas y Modelo son obligatorios', 'error');
        return false;
    }
    
    if (vehiculosEstacionados.some(v => v.placas === placas)) {
        showModal('Vehículo Duplicado', `El vehículo ${placas} ya está estacionado.`);
        return false;
    }
    
    idCounter++;
    const nuevoVehiculo = {
        id: idCounter,
        placas,
        modelo: modelo.trim(),
        detalle: detalle.trim() || 'N/A',
        horaEntrada: new Date(),
        horaSalida: null,
        duracion: null,
        costoTotal: 0
    };
    
    vehiculosEstacionados.push(nuevoVehiculo);
    renderEstacionados();
    updateTotals();
    generarEImprimirTicket(nuevoVehiculo, false);
    saveData();
    
    showToast(`Vehículo ${placas} registrado`, 'success');
    return true;
}

// ========================================
// REGISTRO DE SALIDA
// ========================================
function registrarSalida(placas) {
    placas = placas.toUpperCase().trim();
    
    const index = vehiculosEstacionados.findIndex(v => v.placas === placas);
    
    if (index === -1) {
        showModal('Vehículo No Encontrado', `No se encontró ningún vehículo con las placas/código: ${placas}`);
        elements.salidaStatus.textContent = `❌ Vehículo ${placas} no encontrado.`;
        elements.salidaStatus.className = 'p-4 rounded-lg mb-4 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200';
        elements.salidaStatus.classList.remove('hidden');
        setTimeout(() => elements.salidaStatus.classList.add('hidden'), 5000);
        return;
    }
    
    const vehiculo = vehiculosEstacionados[index];
    const { duracion, costoTotal } = calcularCosto(vehiculo);
    
    vehiculo.horaSalida = new Date();
    vehiculo.duracion = duracion;
    vehiculo.costoTotal = costoTotal;
    
    // Mover al historial
    historialSalidas.push({ ...vehiculo });
    vehiculosEstacionados.splice(index, 1);
    
    // Actualizar vistas
    renderEstacionados();
    renderHistorial();
    updateTotals();
    generarEImprimirTicket(vehiculo, true);
    saveData();
    
    // Mostrar resumen
    elements.salidaStatus.innerHTML = `
        <h3 class="font-bold text-lg mb-2">✅ Salida Registrada</h3>
        <p><strong>Placas:</strong> ${vehiculo.placas}</p>
        <p><strong>Duración:</strong> ${duracion}</p>
        <p class="text-2xl font-bold mt-2">Total: ${CURRENCY_FORMATTER.format(costoTotal)}</p>
    `;
    elements.salidaStatus.className = 'p-4 rounded-lg mb-4 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';
    elements.salidaStatus.classList.remove('hidden');
    
    showToast(`Salida registrada: ${CURRENCY_FORMATTER.format(costoTotal)}`, 'success');
    
    setTimeout(() => elements.salidaStatus.classList.add('hidden'), 10000);
}

// ========================================
// RENDERIZADO DE LISTAS
// ========================================
function renderEstacionados(filterText = '') {
    elements.estacionadosList.innerHTML = '';
    
    const filtrados = vehiculosEstacionados.filter(v => 
        v.placas.toLowerCase().includes(filterText.toLowerCase()) ||
        v.modelo.toLowerCase().includes(filterText.toLowerCase())
    );
    
    elements.countEstacionados.textContent = filtrados.length;
    
    if (filtrados.length === 0) {
        elements.estacionadosList.innerHTML = `
            <p class="text-gray-500 dark:text-gray-400 italic col-span-full text-center py-8">
                ${filterText ? 'No se encontraron vehículos' : 'No hay vehículos estacionados'}
            </p>
        `;
        return;
    }
    
    filtrados.forEach(v => {
        const { duracion, costoTotal } = calcularCosto(v);
        const card = document.createElement('div');
        card.className = 'p-4 rounded-xl shadow-md border bg-white dark:bg-gray-800 dark:border-gray-700 flex flex-col justify-between hover:shadow-lg transition fade-in';
        
        card.innerHTML = `
            <div>
                <p class="font-bold text-xl text-gray-800 dark:text-gray-200">${v.placas}</p>
                <p class="text-gray-600 dark:text-gray-400 mt-1">${v.modelo}</p>
                <p class="text-sm text-gray-500 dark:text-gray-500 mt-1">
                    <span class="font-medium">Detalle:</span> ${v.detalle}
                </p>
                <p class="text-sm text-gray-500 dark:text-gray-500 mt-3">
                    <span class="font-medium">Entrada:</span><br>${formatDateTime(v.horaEntrada)}
                </p>
                <p class="text-lg font-semibold text-purple-600 dark:text-purple-400 mt-3">
                    ⏱️ ${duracion}
                </p>
                <p class="text-2xl font-bold text-red-600 dark:text-red-400 mt-2">
                    ${CURRENCY_FORMATTER.format(costoTotal)}
                </p>
            </div>
            <button onclick="registrarSalidaConBoton('${v.placas}')" 
                    class="mt-4 w-full app-button-secondary font-bold py-2.5 px-4 rounded-xl text-sm">
                🚗 Registrar Salida
            </button>
        `;
        elements.estacionadosList.appendChild(card);
    });
    
    updateChart();
}

function renderHistorial(filterText = '') {
    elements.historialList.innerHTML = '';
    
    const filtrados = historialSalidas.filter(v =>
        v.placas.toLowerCase().includes(filterText.toLowerCase()) ||
        v.modelo.toLowerCase().includes(filterText.toLowerCase())
    );
    
    elements.countHistorial.textContent = filtrados.length;
    
    if (filtrados.length === 0) {
        elements.historialList.innerHTML = `
            <p class="text-gray-500 dark:text-gray-400 italic text-center py-8">
                ${filterText ? 'No se encontraron registros' : 'Aún no hay salidas registradas'}
            </p>
        `;
        return;
    }
    
    const reversedHistory = [...filtrados].reverse();
    reversedHistory.forEach(v => {
        const item = document.createElement('div');
        item.className = 'p-4 rounded-xl border bg-gray-50 dark:bg-gray-800 dark:border-gray-700 grid grid-cols-1 md:grid-cols-5 gap-4 items-center hover:bg-gray-100 dark:hover:bg-gray-750 transition fade-in';
        
        item.innerHTML = `
            <div>
                <p class="font-bold text-lg text-gray-800 dark:text-gray-200">${v.placas}</p>
                <p class="text-sm text-gray-600 dark:text-gray-400">${v.modelo}</p>
                <p class="text-xs text-gray-500 dark:text-gray-500">${v.detalle}</p>
            </div>
            <div class="text-sm">
                <p class="text-gray-500 dark:text-gray-400"><strong>Entrada:</strong></p>
                <p class="text-gray-700 dark:text-gray-300">${formatDateTime(v.horaEntrada)}</p>
            </div>
            <div class="text-sm">
                <p class="text-gray-500 dark:text-gray-400"><strong>Salida:</strong></p>
                <p class="text-gray-700 dark:text-gray-300">${formatDateTime(v.horaSalida)}</p>
            </div>
            <div class="text-center">
                <p class="text-sm text-gray-500 dark:text-gray-400">Duración</p>
                <p class="font-semibold text-gray-800 dark:text-gray-200">${v.duracion}</p>
            </div>
            <div class="text-right">
                <p class="text-sm text-gray-500 dark:text-gray-400">Total</p>
                <p class="font-bold text-2xl text-red-600 dark:text-red-400">${CURRENCY_FORMATTER.format(v.costoTotal)}</p>
            </div>
        `;
        elements.historialList.appendChild(item);
    });
}

// ========================================
// ACTUALIZACIÓN DE ESTADÍSTICAS
// ========================================
function updateTotals() {
    const totalCobradoHoy = historialSalidas.reduce((sum, v) => sum + v.costoTotal, 0);
    const totalAutos = historialSalidas.length;
    const promedioAuto = totalAutos > 0 ? totalCobradoHoy / totalAutos : 0;
    
    elements.totalCobrado.textContent = CURRENCY_FORMATTER.format(totalCobradoHoy);
    elements.totalAutos.textContent = totalAutos;
    elements.autosEstacionados.textContent = vehiculosEstacionados.length;
    elements.promedioAuto.textContent = CURRENCY_FORMATTER.format(promedioAuto);
}

// ========================================
// GRÁFICO DE ENTRADAS POR HORA
// ========================================
function updateChart() {
    const entriesByHour = new Array(24).fill(0);
    const allVehicles = [...vehiculosEstacionados, ...historialSalidas];
    
    allVehicles.forEach(v => {
        const entryDate = v.horaEntrada instanceof Date ? v.horaEntrada : new Date(v.horaEntrada);
        const hour = entryDate.getHours();
        entriesByHour[hour]++;
    });
    
    const isDark = document.body.classList.contains('dark');
    
    const chartData = {
        labels: Array.from({ length: 24 }, (_, i) => `${i}:00`),
        datasets: [{
            label: 'Entradas por Hora',
            data: entriesByHour,
            backgroundColor: 'rgba(139, 92, 246, 0.7)',
            borderColor: 'rgba(139, 92, 246, 1)',
            borderWidth: 2,
            borderRadius: 6,
        }]
    };
    
    if (chartInstance) {
        chartInstance.data = chartData;
        chartInstance.options.scales.x.ticks.color = isDark ? '#D1D5DB' : '#4B5563';
        chartInstance.options.scales.y.ticks.color = isDark ? '#D1D5DB' : '#4B5563';
        chartInstance.options.scales.x.grid.color = isDark ? '#374151' : '#E5E7EB';
        chartInstance.options.scales.y.grid.color = isDark ? '#374151' : '#E5E7EB';
        chartInstance.update();
    } else {
        const ctx = elements.chart.getContext('2d');
        chartInstance = new Chart(ctx, {
            type: 'bar',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        ticks: { color: isDark ? '#D1D5DB' : '#4B5563' },
                        grid: { color: isDark ? '#374151' : '#E5E7EB' }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1,
                            color: isDark ? '#D1D5DB' : '#4B5563'
                        },
                        grid: { color: isDark ? '#374151' : '#E5E7EB' }
                    }
                },
                plugins: {
                    legend: { display: false }
                }
            }
        });
    }
}

// ========================================
// TEMA OSCURO
// ========================================
function toggleTheme() {
    document.body.classList.toggle('dark');
    const isDark = document.body.classList.contains('dark');
    elements.themeIcon.textContent = isDark ? '☀️' : '🌙';
    localStorage.setItem(CONFIG.STORAGE_KEYS.TEMA, isDark ? 'dark' : 'light');
    updateChart(); // Actualizar colores del gráfico
}

function loadTheme() {
    const savedTheme = localStorage.getItem(CONFIG.STORAGE_KEYS.TEMA);
    if (savedTheme === 'dark') {
        document.body.classList.add('dark');
        elements.themeIcon.textContent = '☀️';
    }
}

// ========================================
// EXPORTACIÓN DE DATOS
// ========================================
function exportToCSV() {
    if (historialSalidas.length === 0) {
        showToast('No hay datos para exportar', 'warning');
        return;
    }
    
    let csv = 'Placas,Modelo,Detalle,Entrada,Salida,Duracion,Costo\n';
    
    historialSalidas.forEach(v => {
        csv += `"${v.placas}","${v.modelo}","${v.detalle}","${formatDateTime(v.horaEntrada)}","${formatDateTime(v.horaSalida)}","${v.duracion}","${v.costoTotal}"\n`;
    });
    
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    const fecha = new Date().toISOString().split('T')[0];
    
    link.setAttribute('href', url);
    link.setAttribute('download', `historial-estacionamiento-${fecha}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showToast('Archivo CSV exportado', 'success');
}

function createBackup() {
    const backup = {
        fecha: new Date().toISOString(),
        vehiculos: vehiculosEstacionados,
        historial: historialSalidas,
        contador: idCounter,
        tarifas: tarifas
    };
    
    const blob = new Blob([JSON.stringify(backup, null, 2)], { type: 'application/json' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    const fecha = new Date().toISOString().split('T')[0];
    
    link.setAttribute('href', url);
    link.setAttribute('download', `backup-estacionamiento-${fecha}.json`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showToast('Backup creado exitosamente', 'success');
}

function restoreBackup() {
    elements.restoreFileInput.click();
}

function handleRestoreFile(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = (e) => {
        try {
            const backup = JSON.parse(e.target.result);
            
            vehiculosEstacionados = backup.vehiculos.map(v => ({
                ...v,
                horaEntrada: new Date(v.horaEntrada),
                horaSalida: v.horaSalida ? new Date(v.horaSalida) : null
            }));
            
            historialSalidas = backup.historial.map(v => ({
                ...v,
                horaEntrada: new Date(v.horaEntrada),
                horaSalida: new Date(v.horaSalida)
            }));
            
            idCounter = backup.contador || 0;
            tarifas = backup.tarifas || { ...CONFIG.TARIFAS_DEFAULT };
            
            saveData();
            renderEstacionados();
            renderHistorial();
            updateTotals();
            updateChart();
            
            showToast('Backup restaurado exitosamente', 'success');
        } catch (error) {
            showToast('Error al restaurar backup', 'error');
            console.error('Restore error:', error);
        }
    };
    reader.readAsText(file);
}

function exportReport() {
    const totalCobrado = historialSalidas.reduce((sum, v) => sum + v.costoTotal, 0);
    const totalAutos = historialSalidas.length;
    const promedio = totalAutos > 0 ? totalCobrado / totalAutos : 0;
    const fecha = new Date().toLocaleDateString('es-MX');
    
    let report = `REPORTE DE ESTACIONAMIENTO\n`;
    report += `Fecha: ${fecha}\n`;
    report += `${'='.repeat(50)}\n\n`;
    report += `RESUMEN DEL DÍA:\n`;
    report += `- Total cobrado: ${CURRENCY_FORMATTER.format(totalCobrado)}\n`;
    report += `- Total de autos: ${totalAutos}\n`;
    report += `- Promedio por auto: ${CURRENCY_FORMATTER.format(promedio)}\n`;
    report += `- Autos estacionados: ${vehiculosEstacionados.length}\n\n`;
    report += `${'='.repeat(50)}\n\n`;
    report += `HISTORIAL DE SALIDAS:\n\n`;
    
    historialSalidas.forEach((v, i) => {
        report += `${i + 1}. ${v.placas} - ${v.modelo}\n`;
        report += `   Entrada: ${formatDateTime(v.horaEntrada)}\n`;
        report += `   Salida: ${formatDateTime(v.horaSalida)}\n`;
        report += `   Duración: ${v.duracion}\n`;
        report += `   Costo: ${CURRENCY_FORMATTER.format(v.costoTotal)}\n\n`;
    });
    
    const blob = new Blob([report], { type: 'text/plain;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    
    link.setAttribute('href', url);
    link.setAttribute('download', `reporte-${fecha}.txt`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showToast('Reporte exportado', 'success');
}

// ========================================
// CONFIGURACIÓN DE TARIFAS
// ========================================
function mostrarConfigTarifas() {
    document.getElementById('config-primera-hora').value = tarifas.primeraHora;
    document.getElementById('config-fraccion').value = tarifas.fraccionMinuto;
    document.getElementById('config-maximo').value = tarifas.cargoMaximo;
    elements.configModal.classList.remove('hidden');
    elements.configModal.classList.add('flex');
}

function guardarConfigTarifas(e) {
    e.preventDefault();
    
    tarifas.primeraHora = parseFloat(document.getElementById('config-primera-hora').value);
    tarifas.fraccionMinuto = parseFloat(document.getElementById('config-fraccion').value);
    tarifas.cargoMaximo = parseFloat(document.getElementById('config-maximo').value);
    
    saveData();
    elements.configModal.classList.add('hidden');
    elements.configModal.classList.remove('flex');
    
    renderEstacionados(); // Actualizar costos
    showToast('Tarifas actualizadas', 'success');
}

function clearHistorial() {
    if (historialSalidas.length === 0) {
        showToast('No hay historial para limpiar', 'info');
        return;
    }
    
    if (confirm('¿Estás seguro de que deseas eliminar todo el historial? Esta acción no se puede deshacer.')) {
        historialSalidas = [];
        saveData();
        renderHistorial();
        updateTotals();
        showToast('Historial limpiado', 'success');
    }
}

// ========================================
// FUNCIÓN AUXILIAR PARA BOTÓN DE SALIDA
// ========================================
window.registrarSalidaConBoton = (placas) => {
    registrarSalida(placas);
    elements.salidaForm.reset();
};

// ========================================
// EVENT LISTENERS
// ========================================
function initEventListeners() {
    // Formularios
    elements.entradaForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const placas = elements.placasInput.value;
        const modelo = elements.modeloInput.value;
        const detalle = elements.detalleInput.value;
        
        if (registrarEntrada(placas, modelo, detalle)) {
            elements.entradaForm.reset();
        }
    });
    
    elements.salidaForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const placas = elements.placasSalidaInput.value;
        registrarSalida(placas);
        elements.salidaForm.reset();
    });
    
    elements.configForm.addEventListener('submit', guardarConfigTarifas);
    
    // Búsquedas
    elements.searchEstacionados.addEventListener('input', (e) => {
        renderEstacionados(e.target.value);
    });
    
    elements.searchHistorial.addEventListener('input', (e) => {
        renderHistorial(e.target.value);
    });
    
    // Botones
    elements.bluetoothBtn.addEventListener('click', connectBluetooth);
    elements.themeToggle.addEventListener('click', toggleTheme);
    elements.modalCloseBtn.addEventListener('click', closeModal);
    elements.configTarifasBtn.addEventListener('click', mostrarConfigTarifas);
    elements.cancelConfigBtn.addEventListener('click', () => {
        elements.configModal.classList.add('hidden');
        elements.configModal.classList.remove('flex');
    });
    elements.clearHistorialBtn.addEventListener('click', clearHistorial);
    elements.backupBtn.addEventListener('click', createBackup);
    elements.restoreBtn.addEventListener('click', restoreBackup);
    elements.exportCsvBtn.addEventListener('click', exportToCSV);
    elements.exportReportBtn.addEventListener('click', exportReport);
    elements.restoreFileInput.addEventListener('change', handleRestoreFile);
    
    // Click fuera del modal para cerrar
    elements.modalOverlay.addEventListener('click', (e) => {
        if (e.target === elements.modalOverlay) closeModal();
    });
    
    elements.configModal.addEventListener('click', (e) => {
        if (e.target === elements.configModal) {
            elements.configModal.classList.add('hidden');
            elements.configModal.classList.remove('flex');
        }
    });
}

// ========================================
// INICIALIZACIÓN
// ========================================
document.addEventListener('DOMContentLoaded', () => {
    loadTheme();
    loadData();
    renderEstacionados();
    renderHistorial();
    updateTotals();
    updateClock();
    updateChart();
    initEventListeners();
    
    // Actualizar reloj cada segundo
    setInterval(updateClock, 1000);
    
    // Actualizar tiempos y costos cada minuto
    setInterval(() => {
        renderEstacionados(elements.searchEstacionados.value);
    }, 60000);
    
    elements.salidaStatus.classList.add('hidden');
    
    showToast('Sistema iniciado correctamente', 'success');
});
